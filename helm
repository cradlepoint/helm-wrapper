#!/bin/bash

#####
# helm-wrapper tool simplifies helm/tiller version and namespace management.
#
# See https://github.com/cradlepoint/helm-wrapper for installation instructions.
#
#####

set -e # exit on any error

# helper to scan caller-supplied parameters
isParamSpecified() {
  PARAM=$1
  for P in "${@:2}"; do
    if [ $P == "$PARAM" ]; then
     return 0 # true
    fi
  done
  return 1 # false
}

# save the original params off- the processing we do is destructive if original
# strings
SAVED_PARAMS="$@"

# parse caller-supplied values
PARAMS=""
while (( "$#" )); do
  case "$1" in
    --tiller-namespace)
      PARAM_TILLER_NAMESPACE=$2
      shift 2
      ;;
    --kube-context)
      PARAM_KUBECONTEXT=$2
      shift 2
      ;;
    --kubeconfig)
      PARAM_KUBECONFIG=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
eval set -- "$PARAMS"

##############
# Step 1: figure out tiller namespace; this is required because we ask tiller for its version later.

if [ -n "$PARAM_TILLER_NAMESPACE" ]; then
  NS_DEBUG="helm-wrapper: using --tiller-namespace $PARAM_TILLER_NAMESPACE"
  NS="$PARAM_TILLER_NAMESPACE"
else
  # caller did not specify --tiller-namespace so calculate it
  if [ -n "$PARAM_KUBECONFIG" ]; then
    (>&2 echo "helm-wrapper: error, --kubeconfig is unsupported."); exit 1
  elif [ -n "$PARAM_KUBECONTEXT" ]; then
    (>&2 echo "helm-wrapper: error, --kube-context is unsupported."); exit 1

  # check TILLER_NAMESPACE in environment
  elif [ -n "$TILLER_NAMESPACE" ]; then
    NS_DEBUG="helm-wrapper: using env TILLER_NAMESPACE $TILLER_NAMESPACE"
    NS=$TILLER_NAMESPACE

  # check default kubeconfig
  elif [ ! -z "`kubectl config current-context 2>/dev/null`" ] ; then
    NS=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    if [ -n "$NS" ]; then
      NS_DEBUG="helm-wrapper: using kubeconfig namespace $NS"
    fi
  fi

  # otherwise use the default tiller namespace, kube-system
  if [ -z "$NS" ]; then
    NS_DEBUG="helm-wrapper: using (default) kube-system namespace"
    NS="kube-system"
  fi

fi

NS="--tiller-namespace $NS"

##############
# Step 2: make the helm call, matching tiller version for server calls

# search for commands that require helm and tiller to match
TILLER_COMMANDS=(ls list history get install upgrade delete status)
TILLER_COMMAND_FOUND=false
for COMMAND in "${TILLER_COMMANDS[@]}"; do
  if isParamSpecified $COMMAND $@; then
    TILLER_COMMAND_FOUND=true
    break
  fi
done

HELM_LATEST=$(ls /usr/local/bin/helm-*  | sort -V | tail -1)

if [ "$TILLER_COMMAND_FOUND" == "true" ]; then
  # execute command using helm that matches tiller version

  # get server tiller version
  SERVER_TILLER_VERSION=$(exec $HELM_LATEST $NS version --short | grep Server | sed 's/.*v\(.*\)+.*/\1/')

  if [ -n "$SERVER_TILLER_VERSION" ]; then
    (>&2 echo "$NS_DEBUG with helm v$SERVER_TILLER_VERSION")
    HELM_CURRENT="/usr/local/bin/helm-v$SERVER_TILLER_VERSION"
    if [ -f "$HELM_CURRENT" ]; then
      exec $HELM_CURRENT $NS $SAVED_PARAMS
    else
      (>&2 echo "helm-wrapper: error, helm client version $SERVER_TILLER_VERSION is not installed.")
    fi
  else
    (>&2 echo "helm-wrapper: error, unable to get tiller version in $NS")
  fi

else
  # execute command using latest helm

  # output namespace info for "helm init"
  if isParamSpecified "init" $@; then
    (>&2 echo "$NS_DEBUG with helm $HELM_LATEST")
  fi

  exec $HELM_LATEST $NS $SAVED_PARAMS
fi
